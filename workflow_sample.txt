Perfect! Now I understand the existing workflow system structure. Let me create a comprehensive
  workflow sample that demonstrates all the current features.

  🔧 Complete Workflow Sample: "Advanced Malware Detection & Response"

  Here's a practical security workflow using your existing NodeGuard features:

  Workflow Overview

  Name: Advanced Malware Detection & Response PipelinePurpose: Detect, analyze, and automatically
  respond to malware infectionsUse Case: Real-world enterprise security operations

  ---
  📋 Workflow Configuration

  Node 1: Data Input

  {
    "id": "input-malware-001",
    "type": "input",
    "position": { "x": 100, "y": 200 },
    "data": {
      "label": "Endpoint Events",
      "config": {
        "source": "kafka",
        "topic": "security.endpoint.events",
        "batchSize": 50,
        "filters": {
          "event_types": ["file_creation", "process_execution", "network_connection"],
          "severity": ["medium", "high", "critical"]
        }
      }
    }
  }

  Node 2: ML Scoring

  {
    "id": "ml-malware-001",
    "type": "ml-scoring",
    "position": { "x": 350, "y": 200 },
    "data": {
      "label": "Malware ML Scoring",
      "config": {
        "model": "ensemble",
        "threshold": 0.75,
        "features": ["file_hash", "process_behavior", "network_patterns"],
        "models": ["xgboost", "random_forest", "isolation_forest"],
        "confidence_threshold": 0.8
      }
    }
  }

  Node 3: AI Analysis

  {
    "id": "ai-malware-001",
    "type": "ai-analysis",
    "position": { "x": 600, "y": 200 },
    "data": {
      "label": "Advanced AI Analysis",
      "config": {
        "model": "anthropic/claude-3.5-sonnet",
        "analysisType": "comprehensive",
        "includeContext": true,
        "prompts": {
          "malware_analysis": "Analyze this suspicious activity for malware indicators. Consider
  file behavior, network connections, and process patterns.",
          "threat_classification": "Classify the threat type and potential impact.",
          "remediation_advice": "Suggest immediate containment and remediation steps."
        }
      }
    }
  }

  Node 4: Event Correlation

  {
    "id": "correlation-malware-001",
    "type": "correlation",
    "position": { "x": 350, "y": 400 },
    "data": {
      "label": "Threat Correlation",
      "config": {
        "timeWindow": "10m",
        "correlationRules": [
          {
            "name": "lateral_movement",
            "conditions": ["multiple_failed_logins", "unusual_network_access"],
            "threshold": 3
          },
          {
            "name": "data_exfiltration",
            "conditions": ["large_file_transfer", "external_connection"],
            "threshold": 2
          }
        ],
        "groupBy": ["source_ip", "user_id", "hostname"]
      }
    }
  }

  Node 5: Generate Alert

  {
    "id": "alert-malware-001",
    "type": "alert",
    "position": { "x": 600, "y": 400 },
    "data": {
      "label": "Security Alert",
      "config": {
        "severity": "high",
        "channels": ["email", "slack", "pagerduty"],
        "template": "malware_detection",
        "escalation": {
          "level_1": ["security_analyst"],
          "level_2": ["security_manager"],
          "timeout": "15m"
        },
        "customFields": {
          "threat_type": "malware",
          "confidence_score": "{{ml_confidence}}",
          "ai_analysis": "{{ai_summary}}"
        }
      }
    }
  }

  Node 6: Automated Response

  {
    "id": "response-malware-001",
    "type": "response",
    "position": { "x": 850, "y": 400 },
    "data": {
      "label": "Auto Containment",
      "config": {
        "actions": [
          {
            "type": "quarantine_host",
            "params": {"isolation_level": "network"}
          },
          {
            "type": "block_file_hash",
            "params": {"scope": "organization"}
          },
          {
            "type": "terminate_process",
            "params": {"force": true}
          }
        ],
        "requireApproval": true,
        "approvers": ["security_manager", "incident_commander"],
        "timeout": "30m",
        "rollback": {
          "enabled": true,
          "conditions": ["false_positive_confirmed"]
        }
      }
    }
  }

  ---
  🔗 Workflow Connections (Edges)

  {
    "edges": [
      {
        "id": "e1",
        "source": "input-malware-001",
        "target": "ml-malware-001",
        "type": "smoothstep",
        "label": "Raw Events"
      },
      {
        "id": "e2",
        "source": "ml-malware-001",
        "target": "ai-malware-001",
        "condition": "ml_score > 0.75",
        "label": "High Risk Events"
      },
      {
        "id": "e3",
        "source": "ml-malware-001",
        "target": "correlation-malware-001",
        "label": "All Scored Events"
      },
      {
        "id": "e4",
        "source": "ai-malware-001",
        "target": "alert-malware-001",
        "condition": "threat_confirmed == true",
        "label": "Confirmed Threats"
      },
      {
        "id": "e5",
        "source": "correlation-malware-001",
        "target": "alert-malware-001",
        "condition": "correlation_score > 2",
        "label": "Correlated Events"
      },
      {
        "id": "e6",
        "source": "alert-malware-001",
        "target": "response-malware-001",
        "condition": "severity in ['high', 'critical']",
        "label": "Critical Alerts"
      }
    ]
  }

  ---
  ⚡ Workflow Execution Flow

  Step 1: Data Ingestion

  Kafka Topic: security.endpoint.events
  ↓
  Filter: file_creation, process_execution, network_connection
  ↓
  Batch Size: 50 events
  ↓
  Output: Raw security events

  Step 2: ML Analysis

  Input: Raw security events
  ↓
  Models: XGBoost + Random Forest + Isolation Forest
  ↓
  Features: file_hash, process_behavior, network_patterns
  ↓
  Threshold: 0.75 confidence
  ↓
  Output: Risk-scored events

  Step 3: AI Deep Analysis

  Input: High-risk events (ML score > 0.75)
  ↓
  Model: Claude 3.5 Sonnet via OpenRouter
  ↓
  Analysis: Comprehensive threat assessment
  ↓
  Output: AI-enriched threat intelligence

  Step 4: Event Correlation

  Input: All scored events
  ↓
  Time Window: 10 minutes
  ↓
  Rules: Lateral movement + Data exfiltration patterns
  ↓
  Output: Correlated threat patterns

  Step 5: Alert Generation

  Input: Confirmed threats + Correlated events
  ↓
  Channels: Email + Slack + PagerDuty
  ↓
  Escalation: Analyst → Manager (15min timeout)
  ↓
  Output: Security alerts with context

  Step 6: Automated Response

  Input: Critical alerts (severity: high/critical)
  ↓
  Actions: Quarantine host + Block hash + Kill process
  ↓
  Approval: Required from security manager
  ↓
  Timeout: 30 minutes with rollback option

  ---
  📊 Expected Workflow Performance

  Processing Metrics:

  - Throughput: 2,500 events/minute
  - Latency: < 30 seconds end-to-end
  - False Positive Rate: < 5%
  - Detection Accuracy: > 95%

  Business Impact:

  - MTTD (Mean Time to Detection): 2 minutes
  - MTTR (Mean Time to Response): 5 minutes
  - Automation Rate: 80% of incidents handled automatically
  - Analyst Workload Reduction: 70%

  ---
  🎯 How to Create This Workflow

  In the NodeGuard UI:

  1. Open Workflow Builder: Navigate to /workflow-builder
  2. Drag Nodes:
    - Drag "Data Input" → Configure Kafka source
    - Drag "ML Scoring" → Set ensemble model
    - Drag "AI Analysis" → Configure Claude 3.5 Sonnet
    - Drag "Event Correlation" → Set time windows
    - Drag "Generate Alert" → Configure channels
    - Drag "Automated Response" → Set containment actions
  3. Connect Nodes: Draw connections between nodes with conditions
  4. Configure Each Node: Click nodes to open configuration dialogs
  5. Save & Test: Save workflow and run test execution
  6. Deploy: Activate workflow for production use

  ---
  🔍 Advanced Configuration Options

  Conditional Logic:

  {
    "conditions": {
      "ml_branch": "ml_score > 0.75 AND confidence > 0.8",
      "correlation_branch": "correlation_count >= 2",
      "response_trigger": "severity IN ['high', 'critical'] AND approval_received = true"
    }
  }

  Error Handling:

  {
    "error_handling": {
      "retry_policy": {
        "max_retries": 3,
        "backoff": "exponential"
      },
      "fallback_actions": ["log_error", "notify_admin"],
      "circuit_breaker": {
        "failure_threshold": 5,
        "timeout": "60s"
      }
    }
  }

  This workflow sample demonstrates all your existing features working together in a real-world
  security scenario. Would you like me to create additional workflow samples for different use
  cases like compliance monitoring or incident response?
