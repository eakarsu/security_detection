services:
  # Database Services
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: nodeguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NodeGuard2025!SecureDB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/setup/reset-db.sql:/docker-entrypoint-initdb.d/02-reset-db.sql
      - ./scripts/setup/seed_security_data.sql:/docker-entrypoint-initdb.d/03-seed-data.sql
    ports:
      - "5432:5432"
    networks:
      - nodeguard-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --protected-mode no --bind 0.0.0.0
    networks:
      - nodeguard-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - nodeguard-network

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    networks:
      - nodeguard-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - nodeguard-network
    healthcheck:
      test: ["CMD", "bash", "-c", "unset JMX_PORT; kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Services
  python-api:
    build:
      context: ./backend/python
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://nodeguard:NodeGuard2025!SecureDB@postgres:5432/nodeguard
      - POSTGRES_PASSWORD=NodeGuard2025!SecureDB
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=nodeguard
      - POSTGRES_USER=nodeguard
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DEFAULT_MODEL=${DEFAULT_MODEL}
      - FALLBACK_MODEL=${FALLBACK_MODEL}
      - MAX_TOKENS=${MAX_TOKENS}
      - TEMPERATURE=${TEMPERATURE}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - kafka
    networks:
      - nodeguard-network

  nodejs-api:
    build:
      context: ./backend/nodejs
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgresql://nodeguard:NodeGuard2025!SecureDB@postgres:5432/nodeguard
      - POSTGRES_PASSWORD=NodeGuard2025!SecureDB
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=nodeguard
      - POSTGRES_USER=nodeguard
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DEFAULT_MODEL=${DEFAULT_MODEL}
      - FALLBACK_MODEL=${FALLBACK_MODEL}
      - MAX_TOKENS=${MAX_TOKENS}
      - TEMPERATURE=${TEMPERATURE}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_ENV=${NODE_ENV}
      - API_PORT=${API_PORT}
      - PYTHON_API_URL=http://python-api:8000
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - kafka
      - python-api
    networks:
      - nodeguard-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_PYTHON_API_URL=http://localhost:8000
    depends_on:
      - nodejs-api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - nodeguard-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - nodeguard-network

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - nodeguard-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  nodeguard-network:
    driver: bridge
